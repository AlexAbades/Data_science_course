import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_breast_cancer

cancer = load_breast_cancer()


print(cancer['DESCR'])

df_features = pd.DataFrame(cancer.data, columns=cancer['feature_names'])

print(df_features)

X = df_features

y = cancer['target']

X_test, X_train, y_test, y_train = train_test_split(X, y, random_state=101, test_size=0.3)

from sklearn.svm import SVC

model = SVC()

model.fit(X_train, y_train)

predictions = model.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix

print(confusion_matrix(y_test, predictions))
print('\n')
print(classification_report(y_test, predictions))

# The default model isn't running well because it need it's parameters adjusted. t's also useful to normalize the data
# before we pass the SVM method

# Search for the right parameters by Grid Search, allows us to find C or gamma values.
from sklearn.model_selection import GridSearchCV

param_grid = {'C':[0.1, 1, 10, 100, 100, 1000], 'gamma':[1, 0.1, 0.01, 0.001, 0.0001]}

grid = GridSearchCV(SVC(), param_grid, verbose=3)

grid.fit(X_test, y_test)

print(grid.best_params_)

print(grid.best_estimator_)
# grid uses cross validation to find the values of the parameters

# Then we can use the grid objest to build our model

grid_predictions = grid.predict(X_test)

print(confusion_matrix(y_test, grid_predictions))
print('\n')
print(classification_report(y_test, grid_predictions))